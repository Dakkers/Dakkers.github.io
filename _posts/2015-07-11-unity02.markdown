---
layout: post
title:  "An Introduction to Unity 2D (Part 2)"
date:   2015-07-12 05:00:00
categories: unity
comments: true
---

Welcome to the second part of the Unity 2D tutorial series! In the first part, we made a character not fall into oblivion by landing on a platform, and we got it to move and jump. In this part, we'll make our character double jump, make the camera follow the character, allow our character to pick up coins, and add a score counter!
<!-- more -->

## Making our character double jump

We're going to jump straight into the programming side of things. Let's think about how we could make our character jump twice. Originally our logic was, "if the character is grounded, and space is pressed, then jump". Now it's a bit more complicated. If our character is grounded then it should be able to jump twice. If it is not grounded, then it should only be allowed to jump one more time or no more.

Let's just try creating some variables. We'll reorganize the variables a bit different from before.

{% highlight csharp %}
using UnityEngine;
using System.Collections;

public class BirdControl : MonoBehaviour {

    [HideInInspector]
    public Rigidbody2D player;

    bool facingRight = false;
    float h = 0f;
    public float speed = 5.0f;

    // jumping variables
    bool jump = false;
    int  jumpsRemaining = 2;
    const int jumpsMax  = 2;
    public float jumpForce = 1000f;

    // Awake, Update, etc...
}
{% endhighlight %}

`jump` and `jumpForce` are the same as before. `jumpsRemaining` is how many jumps our character can perform. `jumpsMax` is a constant, and is the max number of jumps possible.

`Update` can stay the same, as all we need to do there is receive input from the user to jump, just like we did before. Let's change `FixedUpdate`. As we said before, if the character is grounded, the number of jumps remaining should be 2 (`jumpMax`), otherwise it should be able to do 1 or 0 jumps, which would be given by `jumpsRemaining`. So then we have the following:

{% highlight csharp %}
public class BirdControl : MonoBehavior {
    // variables go here...
    // Awake, Update go here...

    void FixedUpdate() {
        // movement logic goes here...

        if (jump) {
            if (grounded) {
                jumpsRemaining = jumpsMax;
            }
            jump = false;   // (same as Part 01)
        }
    }
}
{% endhighlight %}

Alright, great. Now, we should write that if the number of jumps remaining is 1 or 2 (greater than 0), the character should jump, and the number of available jumps should go down by one. This translates to exactly what it sounds like:

{% highlight csharp %}
public class BirdControl : MonoBehavior {
    // variables go here...
    // Awake, Update go here...

    void FixedUpdate() {
        // movement logic goes here...

        if (jump) {
            if (grounded) {
                jumpsRemaining = jumpsMax;
            }
            if (jumpsRemaining > 0) {
                jumpsRemaining--;
                player.AddForce(new Vector2(0, jumpForce));
            }
            jump = false;
        }
    }
}
{% endhighlight %}

Simple enough, and the best part is that it makes sense!

### A bit fancier jump logic

In some platformers, if the character runs off the ledge and does not jump, then the character is only able to jump once. An example of this is the Alien Hominid PDA game. However, our character can clearly jump twice! Let's fix that.

(If you don't really care, and want to just go to the next section, go ahead - it won't change anything later on.)

A way to tell if the character has moved off of a ledge without jumping is by checking the sign of the y-component of their velocity vector. If it's less than 0, then the character should only be able to jump once. However, it is possible that the y-component is negative because they are falling after jumping -- it is also possible that it is falling after double jumping! Thus, we should not set it to 1, but pick the smaller number between 1 and `jumpsRemaining` by using the `Mathf.Min` function:

{% highlight csharp %}
public class BirdControl : MonoBehavior {
    // variables go here...
    // Awake, Update go here...

    void FixedUpdate() {
        // movement logic goes here...

        if (jump) {
            if (grounded) {
                jumpsRemaining = jumpsMax;
            }
            if (player.velocity.y < 0) {
                jumpsRemaining = Mathf.Min(1, jumpsRemaining);
            }
            if (jumpsRemaining > 0) {
                jumpsRemaining--;
                player.AddForce(new Vector2(0, jumpForce));
            }
            jump = false;
        }
    }
}
{% endhighlight %}

Great!

**Wait a minute**, what if our character is walking down a slope? In that case, the character has not yet jumped and is falling, nor has it walked off a ledge, but its y-component of velocity is negative as it is moving down. What we should do before is check to see if it's grounded, and if it isn't, then use this logic. Conveniently, we already have a `if (grounded)` statement, so all we need to do is add an `else` branch like so:

{% highlight csharp %}
public class BirdControl : MonoBehavior {
    // variables go here...
    // Awake, Update go here...

    void FixedUpdate() {
        // movement logic goes here...

        if (jump) {
            if (grounded) {
                jumpsRemaining = jumpsMax;
            } else {
                if (player.velocity.y < 0) {
                    jumpsRemaining = Mathf.Min(1, jumpsRemaining);
                }
            }

            if (jumpsRemaining > 0) {
                jumpsRemaining--;
                player.AddForce(new Vector2(0, jumpForce));
            }
            jump = false;
        }
    }
}
{% endhighlight %}

Voila! That's it. (I'm pretty sure, anyway - if there is a special edge case where this doesn't work, feel free to open an issue on the [GitHub page](https://github.com/SaintDako/SaintDako.github.io) for this blog.)

## Making the camera move with our character

You may notice that our character can easily move off the screen. You may have also noticed that there is a "Camera" object in our Hierarchy that I haven't even mentioned (how rude of me). A Unity Camera dictates what is visible on the screen, in the simplest of cases.

Since we want the camera to follow our character, there are a few ways of going about implementing this. I'm going to do the easiest way, and hopefully in a future post I'll talk about more advanced camera logic. (I tried to implement some Python camera logic I had in an old game, but it didn't work too well...)

Anyway, the simplest way is this: drag the Camera object in the Hierarchy underneath the Character object to make it a child of Character. That's it! Now, the screen should move with the character. Easy-peasy!

### Vomit-inducing camera movements

For shiggles ("shits and giggles"), slowly move the character to the edge of the platform and off. You may get a little dizzy. Since our camera follows our character *exactly*, it is going to rotate with the character. To prevent this, go to the Character object in the Inspector and check the box **Fixed Angle**. This will prevent the character from rotating in any way, which is probably wanted for most platformers.

## Picking up coins

Our game can't really do too much at the moment. Let's add some collectables!

Create an empty child of Foregrounds and call it "Coin". Attach the following components to it:

- Rendering > Sprite Renderer
- New Script > C# Script
- Physics 2D > Circle Collider 2D

Go to our sprites folder and drag the CoinSprite object to the SpriteRenderer's Sprite field. (Drinking game idea: drink every time "sprite" is said). Let's open up the C# script and add the following:

{% highlight csharp %}
using UnityEngine;
using System.Collections;

public class Coin : MonoBehaviour {
    public int score = 100;
}
{% endhighlight %}

Now, go back to the Inspector for the Coin object and underneath the CircleCollider2D component, change the radius to 0.65, and check the "is Trigger" box. The "Is Trigger" property tells the physics engine not to make objects collide with object, but to still check for when objects pass through the object's hitbox.

Before we continue, let's change just a few more things. Let's change the Coin's Layer to a new layer called "Items", and change its Tag to a new tag called "Coin". Also, change the Sorting Layer to "Items". After all of this is done, drag the Coin object from the Hierarchy to the Prefabs folder, as we'll duplicate it in a later part.

![Coin Components](http://i.imgur.com/pV2w9Jk.png "Ooo, shiny.")

For the record: a "tag" is simply a label of sorts that helps with scripting to identify object(s).

Let's open up the script for our character again. To check when our character enters a trigger hitbox, we use the function `OnTriggerEnter2D` -- the `2D` part is important!

{% highlight csharp %}
public class Coin : MonoBehaviour {
    // variables ...
    // Awake, Update, FixedUpdate...

    void OnTriggerEnter2D(Collider2D other) {
        // do something...
    }
}
{% endhighlight %}

`other` is simply the object whose hitbox we've entered. Notice that `other` is not a `GameObject` type. To check to see if the trigger hitbox we've entered is a coin's, we can use the `compareTag` function that is built into every `GameObject` object.

{% highlight csharp %}
public class Coin : MonoBehaviour {
    // variables ...
    // Awake, Update, FixedUpdate...

    void OnTriggerEnter2D(Collider2D other) {
        if (other.gameObject.CompareTag("Coin")) {
            Destroy(other.gameObject);
        }
    }
}
{% endhighlight %}

`CompareTag(tag)` will return `true` if the object's tag is equal to `tag`. `Destroy` will remove the given game object from the scene. If all went well, then running into the coin will destroy it!

### Adding a score counter

So we can destroy coins -- great. Now what? Let's try adding a score counter using some basic text. At the top of the Hierarchy, click Create > UI > Text. An object called "Canvas" will be created in the Hierarchy, along with a child called "Text". Let's rename that to "ScoreLabel", and change the text box of its Text component to say `Score: `.

Click on the box figure underneath the Rect Transform, hold the Alt key, and select the top right option. This will move the text to the top right corner. It is not exactly at the top right corner because of its width, but this can be left alone.

![ScoreLabel](http://i.imgur.com/z6erg15.png "This image is not representative of what the figure will look like if Alt is held down")

Now, create another Text object and make it a child of ScoreLabel. Name this object "ScoreText", change its text box to `0` and move it to the top right corner again. Change its Pos X property to -40, its Width to 60, and its Alignment to Right (in the Text component). This last option will make sure that when our score increases, it does not grow to the right, but instead to the left.

![ScoreText Details](http://i.imgur.com/bejf90l.png "So many details.")

To actually increase the score, let's open up our character's script again. To work with UI objects, we need to use another module, so alter the top of the file to be the following:

{% highlight csharp %}
using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class BirdControl : MonoBehaviour {
    // ...
}
{% endhighlight %}

Our character object should have a "score" variable associated with it, and to change the text on the screen, we will have to have an associated `Text` object, which is exposed by the `UnityEngine.UI` module. We will initialize this `Text` object inside `Awake`, like so:

{% highlight csharp %}
public class BirdControl : MonoBehaviour {

    // speed and jumping variables...

    // UI stuff
    int score = 0;
    Text scoreText;

    void Awake () {
        player = GetComponent<Rigidbody2D>();
        groundCheck = player.transform.Find("groundCheck");
        scoreText = GameObject.Find("Canvas/ScoreLabel/ScoreText").GetComponent<Text>();
    }

    // Update, FixedUpdate, etc...
}       
{% endhighlight %}

`GameObject.Find` does exactly what it sounds like - it attempts to find a game object. The path-like string allows us to find children objects. Since Canvas is in the top-level of the Hierarchy, and ScoreLabel is its child, and ScoreText is ScoreLabel's child, we have to use the `"/"` delimiter. We then get the `Text` component itself, instead of the entire game object.

Back to our `OnTriggerEnter2D` function, we need to get the `score` variable that is set in the Coin script, and add it to our character's score. Then, we need to change the value of `scoreText` to update the text on-screen.

{% highlight csharp %}
public class BirdControl : MonoBehaviour {

    // variables...
    // Awake, Update, etc...

    void OnTriggerEnter2D(Collider2D other) {
        Debug.Log ("Entered trigger!");
        if (other.gameObject.CompareTag("Coin")) {
            score = score + other.gameObject.GetComponent<Coin>().score;
            scoreText.text = score.ToString();
            Destroy(other.gameObject);
        }
    }
}
{% endhighlight %}

And that's it!

## Wrapping up

Congrats! You now know how to build a pretty functional game of sorts. In the next tutorial I'm hoping to go over creating a main menu and changing levels. Until next time!

(If you find any typos, bugs, or have suggestions, feel free to open an issue or submit a pull request on the [blog's GitHub repo](https://github.com/SaintDako/SaintDako.github.io)).